// Client side C/C++ program to demonstrate Socket programming
#include <stdio.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>

int encode_decode(char* message, bool e_or_d);

#define PORT 8000
#define MAX 100
int main(int argc, char const *argv[])
{
	int sock = 0, valread;
	int i;
	struct sockaddr_in serv_addr;
    char buffer[1024] = {0};
	char client_message[MAX];
    char exit_out[] = "exit";
    
	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		printf("\n Socket creation error \n");
		return -1;
	}

	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(PORT);

	// Convert IPv4 and IPv6 addresses from text to binary form
	if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0)
	{
		printf("\nInvalid address/ Address not supported \n");
		return -1;
	}

	if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
	{
		printf("\nConnection Failed \n");
		return -1;
	}
    
	do {
        // Clears out client message from previous loop
        memset(client_message, 0, sizeof client_message);
        
        // Clears out buffer message from previous loop
        memset(buffer, 0, sizeof buffer);
        
        // Client input
        printf("Client, enter a message ['exit' to disconnect]: ");
        fgets(client_message, MAX, stdin);
        client_message[strcspn(client_message, "\n")] = 0;
        
        // Checks if client wrote 'exit'
        if(strcmp(client_message, exit_out) == 0)
            return 0;
        
        // Send to encrypt
        encode_decode(client_message, false);
    
        // Send message to server
        send(sock , client_message , strlen(client_message) , 0 );
        printf("Client message sent\n");
        
        // Reading encypted message from server
        valread = read(sock , buffer, 1024);
        
        // Checks for empyt str
        if(strlen(buffer) == 0) {
            return 0;
        }
        printf("Encrypted message from server: %s\n", buffer);
        
        // Send to decrypt
        encode_decode(buffer, true);
        
        printf("Reading server message: %s\n",buffer);
    } while ((strcmp(client_message, exit_out) != 0));
        
    return 0;
}

int encode_decode(char* message, bool e_or_d){
    int shift = strlen(message);
    unsigned int i;
    if(e_or_d == true){
        for(i = 0; i < strlen(message); i++){
            if((i % 2) == 0)
                message[i] = message[i] + shift + i;
            else
                message[i] = message[i] - shift - i;
        }
        return 1;
    }
    else{
        for(i = 0; i < strlen(message); i++){
            if((i % 2 == 0))
                message[i] = message[i] - shift - i;
            else
                message[i] = message[i] + shift + i;
        }
        return 2;
    }
}

