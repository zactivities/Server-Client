// Server side C/C++ program to demonstrate Socket programming
#include <unistd.h>
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#include <stdbool.h>

int encode_decode(char* message, bool e_or_d);

#define PORT 8000
#define MAX 100
int main(int argc, char const *argv[])
{
	int server_fd, new_socket, valread;
	struct sockaddr_in address;
	int opt = 1;
	int i;
	int addrlen = sizeof(address);
	char buffer[1024] = {0};
	char server_message[MAX];
    char exit_out[] = "exit";

	// Creating socket file descriptor
	if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
	{
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	// Forcefully attaching socket to the port 8000
	if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
												&opt, sizeof(opt)))
	{
		perror("setsockopt");
		exit(EXIT_FAILURE);
	}
 
	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
	address.sin_port = htons( PORT );

	// Forcefully attaching socket to the port 8000
	if (bind(server_fd, (struct sockaddr *)&address,
								sizeof(address))<0)
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
	if (listen(server_fd, 3) < 0)
	{
		perror("listen");
		exit(EXIT_FAILURE);
	}
	if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
					(socklen_t*)&addrlen))<0)
	{
		perror("accept");
		exit(EXIT_FAILURE);
	}

    do {
        // Clears out server message from previous loop
        memset(server_message, 0, sizeof server_message);
        
        // Clears out buffer message from previous loop
        memset(buffer, 0, sizeof buffer);

        // Reading encypted message from client
        valread = read( new_socket , buffer, 1024);
        
        // Checks for empty str
        if(strlen(buffer) == 0) {
            return 0;
        }
        
        printf("Encypted message from client: %s\n", buffer);
        
        // Send to decrypt
        encode_decode(buffer, true);
        printf("Reading client message: %s\n", buffer);
        
        // Server input
        printf("Server, enter a message ['exit' to disconnect]: ");
        fgets(server_message, MAX, stdin);
        server_message[strcspn(server_message, "\n")] = 0;
        
        // Checks if server wrote 'exit'
        if(strcmp(server_message, exit_out) == 0)
            return 0;
        
        // Send to encypt
        encode_decode(server_message, false);
        
        // Send message to client
        send(new_socket , server_message , strlen(server_message) , 0 );
        printf("Server message sent\n");
    } while ((strcmp(server_message, exit_out) != 0));
    
	return 0;
}

int encode_decode(char* message, bool e_or_d){
    int shift = strlen(message);
    unsigned int i;
    if(e_or_d == true){
        for(i = 0; i < strlen(message); i++){
            if((i % 2) == 0)
                message[i] = message[i] + shift + i;
            else
                message[i] = message[i] - shift - i;
        }
        return 1;
    }
    else{
        for(i = 0; i < strlen(message); i++){
            if((i % 2 == 0))
                message[i] = message[i] - shift - i;
            else
                message[i] = message[i] + shift + i;
        }
        return 2;
    }
}



